import React from 'react'
import PropTypes from 'prop-types'
import FontAwesome from 'react-fontawesome'

export default class OAuth extends React.Component {
	state = {
		user: {},
		popup_open: false
	}  

	// when OAuth is "loaded".
	// uses sockets to listen for provider from server. 
	// if socket is active, we assume user is already logged in. 
	componentDidMount() {
		const socket = this.props.socket;
		const provider = this.props.provider;
		socket.on(provider, user =>{
			this.popup.close();
			this.setState({user});
		});
	};	
	
	// if popup is not currently opened,
	// launchPopup. Then, begin checkPopup.  
	startAuth(){
		if (this.state.popup_open == false) {
			this.popup = this.launchPopup();
			this.checkPopup();
			this.setState({popup_open: true});
		}
	}

	// Launches popup using the viewport to reference dimensions
	// the popup serves a url to ./provider/socketId. 
	// the server can use the information in the popup knowing the socket.id. 
	// returns the instance of the popup
	launchPopup() {
		const width = 600;
		const height = 600;
		const left = (window.innerWidth / 2) - (width / 2)
		const top = (window.innerHeight / 2) - (height / 2)
		
		const socket = this.props.socket;
		const provider = this.props.provider;
		const url = `http://localhost:3000/${provider}?socketId=${socket.id}`
		return window.open(url, '',       
			`toolbar=no, location=no, directories=no, status=no, menubar=no, 
			scrollbars=no, resizable=no, copyhistory=no, width=${width}, 
			height=${height}, top=${top}, left=${left}`
		);
	}


	// sets Timer that fires every 1 second. 
	// if popup is closed and user did not login, setstate to popup = closed and restart timer. 
	// used to check if login button should be active. 
	checkPopup() {
		const Timer = setInterval(function(){
			const popup = this.popup;
			if (!popup || popup.closed || popup.closed === undefined) {
				clearInterval(Timer)
				this.setState({ popup_open: false})
			}
		}, 1000);
	}



	// self explanatory
	closeCard(){
		this.setState({user: {}});
	}

	render() {
		const name = this.state.user;
		const provider = this.props.provider;
		const disabled = this.state.popup_open;
    
		// if user exists, return a logged in screen. 
		// if not, render login button as usual. 
		return (
			<div>
				{
				name
					? 
						<div className='card'> 
							<FontAwesome
								name='times-circle'
								className='close'
								onClick={this.closeCard}
							/>
							<h4>{`${name}`}</h4>
						</div>
					:
						<div className='button-wrapper fadein-fast'>
							<button onClick={this.startAuth} className={`${provider} ${disabled} button`}>
								<FontAwesome name={provider} />
							</button>
						</div>
				}
			</div>
		);
	}
}

OAuth.propTypes = {
	provider: PropTypes.string.isRequired,
	socket: PropTypes.object.isRequired
}